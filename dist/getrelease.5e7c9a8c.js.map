{"mappings":"YAEO,SAASA,EAAgBC,EAAQC,EAAKC,EAASC,GACpD,OAAO,IAAIC,QAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAM,IAAIC,eAGhB,GAFAD,EAAIE,KAAKT,EAAQC,GAAK,GACtBM,EAAIG,aAAe,OACfR,GAAWS,MAAMC,QAAQV,GAC3B,IAAK,IAAIW,EAAI,EAAGA,EAAIX,EAAQY,OAAQD,IAClCN,EAAIQ,iBAAiBb,EAAQW,GAAGG,KAAMd,EAAQW,GAAGI,OAErDV,EAAIW,OAAS,KACPX,EAAIY,QAAU,IAChBb,EAAO,CAAEc,WAAYb,EAAIY,OAAQE,SAAUd,EAAIc,WAE/ChB,EAAQ,CAAEe,WAAYb,EAAIY,OAAQE,SAAUd,EAAIc,YAGpDd,EAAIe,QAAU,KACZhB,EAAO,CAAEc,WAAY,EAAGC,SAAU,WAEpCd,EAAIgB,KAAKC,KAAKC,UAAUtB,YAWb,CACbJ,gBAAAA,EACA2B,mBATK,SAA4BzB,EAAKC,GACtC,OAAOH,EAAgB,MAAOE,EAAKC,IASnCyB,oBAPK,SAA6B1B,EAAKC,EAASC,GAChD,OAAOJ,EAAgB,OAAQE,EAAKC,EAASC,KC3B/C,MAAMyB,EAAcC,SAASC,eAAe,kBACtCC,EAAeF,SAASC,eAAe,mBAE7CE,EAAUN,mBACR,iDACA,MAECO,KAAK,EAAGb,WAAAA,EAAYC,SAAAA,MACnBO,EAAYM,YAAe,UAASb,EAAS,GAAGL,OAEjDmB,MAAM,EAAGf,WAAAA,EAAYC,SAAAA,MACpBe,QAAQC,IAAI,8DACZT,EAAYM,YAAe,kBAG/BF,EAAUN,mBACR,kEACA,MAECO,KAAK,EAAGb,WAAAA,EAAYC,SAAAA,MACnB,MAAMiB,EAAcjB,EAASkB,SAASC,MAAM,KACtCC,EAAQH,EAAY,GACpBI,EAAMJ,EAAY,GACxBP,EAAaG,YAAe,WAAUO,KAASC,MAEhDP,MAAM,EAAGf,WAAAA,EAAYC,SAAAA,MACpBe,QAAQC,IAAI,8DACZN,EAAaG,YAAe","sources":["./src/js/httputils.js","./src/js/getrelease.js"],"sourcesContent":["// TODO: Use fetch API instead?\r\n\r\nexport function sendHttpRequest(method, url, headers, data) {\r\n  return new Promise((resolve, reject) => {\r\n    const xhr = new XMLHttpRequest();\r\n    xhr.open(method, url, true);\r\n    xhr.responseType = 'json';\r\n    if (headers && Array.isArray(headers)) {\r\n      for (let i = 0; i < headers.length; i++)\r\n        xhr.setRequestHeader(headers[i].name, headers[i].value);\r\n    }\r\n    xhr.onload = () => {\r\n      if (xhr.status >= 400) {\r\n        reject({ httpStatus: xhr.status, response: xhr.response });\r\n      } else {\r\n        resolve({ httpStatus: xhr.status, response: xhr.response });\r\n      }\r\n    };\r\n    xhr.onerror = () => {\r\n      reject({ httpStatus: 0, response: 'Error' });\r\n    };\r\n    xhr.send(JSON.stringify(data));\r\n  });\r\n}\r\n\r\nexport function sendHttpRequestGet(url, headers) {\r\n  return sendHttpRequest('GET', url, headers);\r\n}\r\nexport function sendHttpRequestPost(url, headers, data) {\r\n  return sendHttpRequest('POST', url, headers, data);\r\n}\r\n\r\nexport default {\r\n  sendHttpRequest,\r\n  sendHttpRequestGet,\r\n  sendHttpRequestPost,\r\n};\r\n","import HttpUtils from './httputils.js';\r\n\r\nconst stableLabel = document.getElementById('stable-release');\r\nconst nightlyLabel = document.getElementById('nightly-release');\r\n\r\nHttpUtils.sendHttpRequestGet(\r\n  'https://api.github.com/repos/nim-lang/Nim/tags',\r\n  null\r\n)\r\n  .then(({ httpStatus, response }) => {\r\n    stableLabel.textContent = `Stable ${response[0].name}`;\r\n  })\r\n  .catch(({ httpStatus, response }) => {\r\n    console.log('Error has occurred while trying to get the latest release!');\r\n    stableLabel.textContent = `Stable v?.?.?`;\r\n  });\r\n\r\nHttpUtils.sendHttpRequestGet(\r\n  'https://api.github.com/repos/nim-lang/nightlies/releases/latest',\r\n  null\r\n)\r\n  .then(({ httpStatus, response }) => {\r\n    const publishedAt = response.tag_name.split('-');\r\n    const month = publishedAt[1];\r\n    const day = publishedAt[2];\r\n    nightlyLabel.textContent = `Nightly ${month}-${day}`;\r\n  })\r\n  .catch(({ httpStatus, response }) => {\r\n    console.log('Error has occurred while trying to get the latest release!');\r\n    nightlyLabel.textContent = `Nightly ??-??`;\r\n  });\r\n"],"names":["sendHttpRequest","method","url","headers","data","Promise","resolve","reject","xhr","XMLHttpRequest","open","responseType","Array","isArray","i","length","setRequestHeader","name","value","onload","status","httpStatus","response","onerror","send","JSON","stringify","sendHttpRequestGet","sendHttpRequestPost","stableLabel","document","getElementById","nightlyLabel","$dc5cd62ea69f1a9fd3bd3c7bc71$export$default","then","textContent","catch","console","log","publishedAt","tag_name","split","month","day"],"version":3,"file":"getrelease.5e7c9a8c.js.map"}